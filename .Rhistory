devtools::use_vignette("my-vignette")
devtools::use_testthat()
install.packages("testthat")
devtools::use_testthat()
devtools::use_data()
devtools::use_data()
devtools::load_all()
usa1990
devtools::use_data()
library(apportR)
library(apportR)
usa1990
devtools::use_data_raw()
devtools::use_data()
devtools::use_data()
devtools::use_data(usa1990, overwrite = TRUE)
devtools::load_all()
library(apportR)
data(apportR)
citentry()
citEntry()
library(apportR)
usa1990
library(apportR)
usa1990
tools::checkRdaFiles()
library(apportR)
usa1990
library(apportR)
usa1820
library(apportR)
?hamilton
library(apportR)
library(apportR)
library(apportR)
?hamilton
library(apportR)
?hamilton
usa1990(hamilton, 435)
hamilton(usa1990, 435)
library(apportR)
usa_census
str(usa_census)
library(apportR)
usa_census
str(usa_census)
library(apportR)
lowndes(usa1820)
library(apportR)
?hamilton
library(apportR)
?hamilton
library(apportR)
adams(usa1832, 252)
?adams
library(apportR)
?adams
usa_census
library(apportR)
jefferson(usa1990, 435)
library(apportR)
```{r}
library(apportR)
usa1830
```
8x2x2x2x2x2
8*2*2*2*2
8*2*2*2*2*2
library(waffle)
#raw data
ids <- c(1520, 656, 182, 35, 187, 193, 21, 56, 61, 26, 28)
#colors
mycolors <- c("orange4", "orange2", "orange", "yellow", "yellow3", "greenyellow",
"darkolivegreen2", "darkolivegreen4",  "darkseagreen3",
"darkturquoise", "dodgerblue", "blue4")
#generate waffle plot
p <- waffle(ids/10, rows=8, colors=rev(mycolors))
# add title and footer
p +
ggtitle("Number of interactions initiated by dominance rank") +
xlab("Each block represents 10 initiated interactions") +
theme(
plot.title   = element_text(hjust=0,vjust=1, size=rel(1.6)),
axis.title.x = element_text(face="italic", hjust=0.95,vjust=1, size=rel(1)))
getwd()
set.seed(10)
runif(7, 1, 100)
set.seed(10)
round(runif(7, 1, 100),0)
x <- round(runif(7, 1, 100),0)
x
sum(x) #
sum(x) #
waffle(x/5, rows=5)
63*5
set.seed(10)
x <- round(runif(7, 1, 100),0)
x
set.seed(10)
x <- round(runif(7, 1, 100),0)
x
sum(x) #329
63*5
x
x
set.seed(10)
x <- round(runif(7, 1, 100),0)
names(x) <- LETTERS[1:7]
x
sum(x) #255
waffle(x, rows=5)
waffle(x/5, rows=5)
waffle(x/5, rows=5)
48*5
x1 <- x/sum(x)
x1
x1 <- (100*x)/sum(x)
x1
x1 <- (100*x)/sum(x)
x1
waffle(x1, rows=5)
18*5
sum(x1%%1)
x1%%1
sum(x1)
minutes <-  c(150, 78, 173, 204, 295)
names(minutes) <- c("Anna", "Betty", "Carl", "Derek", "Ella")
minutes
minutes / sum(minutes)
(100*minutes) / sum(minutes)
housework <- (100*minutes) / sum(minutes)
housework
sum(housework)
floor(housework)
sum(floor(housework))
housework <- (50*minutes) / sum(minutes)
housework
candies <- (50*minutes) / sum(minutes)
candies
floor(candies)
sum(floor(candies))
hamilton(candies)
hamilton(candies,50)
lowndes(candies,50)
adams(candies,50)
candies
housework
minutes <-  c(150, 78, 173, 204, 295)
names(minutes) <- c("Anna", "Betty", "Carl", "Derek", "Ella")
minutes
housework <- minutes
housework
library(apportR)
library(apportR)
majors
scholarships <- (15*majors) / sum(majors)
scholarships
floor(scholarships)
sum(floor(scholarships))
scholarships <- (12*majors) / sum(majors)
scholarships
floor(scholarships)
sum(floor(scholarships))
usa1792
usa1790
data(package='apportR')
data(package='apportR')
usa1792
usa1790
usa1790
sum(usa1790)
sum(usa1790) / 120
std <- sum(usa1790) / 120
std
usa1790 / std
stq <- usa1790 / std
stq
sum(floor(stq))
120 - sum(floor(stq))
lowq <- floor(stq)
sum(lowq)
lowq%%1
stq%%1
rev(sort(stq%%1))
lowq
hamilton(usa1790)
hamilton(usa1790, 120)
lowq
hamilton(usa1790, 120)
rev(sort(stq%%1))
hamilton(usa1790, 120)
usa1790 / hamilton(usa1790, 120)
usa1907
usa1900
hamilton(usa1900, 386)
states1 <- c(150, 78, 173, 204, 295)
states2 <- c(150, 78, 181, 204, 296) #C increases by 8, E by 1
names(states1)<-names(states2)<-LETTERS[1:5]
states1
states2
hamilton(states1, 50)
hamilton(states2, 50)
z<-c(0.1, 0.6, 0.3)
hamilton(z,10)
hamilton(z,1)
hamilton(z,2)
hamilton(z,3)
z <- c(1,4,6)
hamilton(z,10)
hamilton(z,4)
hamilton(z,3)
hamilton(z,2)
z <- c(1,4,16)
hamilton(z,5)
hamilton(z,3)
11/3
z/3.66667
z <- c(1,3,11)
z/sum(z)
z/z1
z1 <- z/sum(z)
z1
z/z1
z/z1
z <- c(1,3,11)
z1 <- z/sum(z)
z1
z/z1
z
z1
z1 <- sum(z)/z
z1
z <- c(1,3,11)
z1 <- sum(z) / 5
z1
z2 <- z/z1
z2
hamilton(z,5)
names(z) <- LETTERS[1:3]
z <- c(1,3,11)
names(z) <- LETTERS[1:3]
z1 <- sum(z) / 5
z1
z2 <- z/z1
z2
hamilton(z,5)
hamilton(z,4)
hamilton(z,3)
z
z1 <- sum(z) / 3
z1
z <- c(1,3,11)
names(z) <- LETTERS[1:3]
z
z1 <- sum(z) / 3
z1
z2 <- z/z1 #standard quota
z2
z
hamilton(z, 100)
library(apportR)
usa1820
lowndes(usa1820, 213)
hamilton(usa1790, 120)
lowndes(usa1790, 120)
library(apportR)
library(apportR)
hamilton0(usa1880, 300)
library(apportR)
---
library(apportR)
library(apportR)
library(apportR)
hours <- c(1,3,11)
names(hours) <- letters[1:3]
hours
hours/ sum(hours)
(5*hours)/ sum(hours)
hours <- c(1,3,11)
names(hours) <- c("Xavier", "Yasmin", "Zach")
hours
#standard quotas
(5*hours)/ sum(hours)
hamilton(hours)
hours <- c(1,3,11)
names(hours) <- c("Xavier", "Yasmin", "Zach")
hours
hamilton(hours,5)
hamilton0(hours,5)
cars.sold <- c(1, 2, 15, 5, 1, 3)
(cars.sold*4) / sum(cars.sold)
(cars.sold*5) / sum(cars.sold)
cars.sold <- c(1, 2, 15, 3, 1, 12, 4)
cars.sold
(cars.sold*10) / sum(cars.sold)
c(paste0("rep", 1:7))
cars.sold <- c(1, 2, 15, 3, 1, 12, 4)
names(cars.sold) <- c(paste0("rep", 1:7))
cars.sold
(cars.sold*10) / sum(cars.sold)
hamilton0(cars.sold)
hamilton0(cars.sold, 10)
hamilton(cars.sold, 10)
hamilton(cars.sold, 10)
set.seed(10)
x <- round(runif(7, 1, 100),0)
names(x) <- LETTERS[1:7]
x
Divisor methods...
usa1790
jefferson(usa1790, 120)
usa1790
divisor <- sum(usa1790) / 105
divisor
usa1832
usa_census
library(apportR)
?jefferson0
library(apportR)
?jefferson0
z <- c(1,4,5,14,16,3)
names(z) <- letters[1:6]
z
jefferson0(z, 10, k=1)
jefferson0(z, 10, k=.5)
jefferson0(z, 10, k=.000001)
x
x<-z
x
jefferson(x,10)
jefferson0(x,10)
jefferson0(x,10, k=.1)
x
n<-10
sum(x)/n
x
divisor <- sum(x)/n
divisor
floor(quotas)
quotas <- x/divisor
floor(quotas)
x2 <- floor(x/divisor)
x2
names(which(x2 == 0))
myzeros <- names(which(x2 == 0)) #Keep names of elements whose floor/lower quota == 0
n - length(myzeros)
n.new <- n - length(myzeros) #new target
x[!(names(x) %in% myzeros)]
x.new <- x[!(names(x) %in% myzeros)]
divisor.new <- sum(x.new)/n.new
divisor.new
seq(0,divisor.new, by=k)
k<-1
seq(0,divisor.new, by=k)
k<-.01
seq(0,divisor.new, by=k)
k<-.1
seq(0,divisor.new, by=k)
mydivisors <-  seq(0,divisor.new, by=k)
obj<-(sapply(rev(mydivisors), function(y) sum(floor(x.new/y))==n.new))
obj
i <- which.max(obj)
i
jeff <- rev(mydivisors)[i]  #use index to find the actual value of the divisor that works.
rev(mydivisors)[i]
res <- floor(x.new/jeff)
res
rep(1, length(myzeros))
myzeros.1 <- rep(1, length(myzeros))
myzeros.1
names(myzeros.1) <- myzeros
myzeros.1
res
res1 <- c(res, myzeros.1)
res1
res1[sort(names(x))]
res1 <- c(res, myzeros.1)
res1 <- res1[sort(names(x))] #put back into alphanumeric order
k<-1
# assign floored zeros to get 1.
x2 <- floor(x/divisor)
myzeros <- names(which(x2 == 0)) #Keep names of elements whose floor/lower quota == 0
n.new <- n - length(myzeros) #new target
x.new <- x[!(names(x) %in% myzeros)]
# find a divisor that works with new target
divisor.new <- sum(x.new)/n.new
mydivisors <-  seq(0,divisor.new, by=k)
obj<-(sapply(rev(mydivisors), function(y) sum(floor(x.new/y))==n.new))
i <- which.max(obj)
jeff <- rev(mydivisors)[i]  #use index to find the actual value of the divisor that works.
res <- floor(x.new/jeff)
# recombine with those assigned a 1
myzeros.1 <- rep(1, length(myzeros))
names(myzeros.1) <- myzeros
res1 <- c(res, myzeros.1)
res1 <- res1[sort(names(x))] #put back into alphanumeric order
res1
res1
sum(res1)
library(apportR)
z
jefferson(z,10)
jefferson0(z,10)
jefferson0(z,10,.1)
jeffersonx(z,10)
jeffersonx(z,10,.1)
jefferson(usa1990, 435)
a<-jefferson(usa1990, 435)
b<-jeffersonx(usa1990, 435)
a=b
a<-jefferson(usa1990, 435)
b<-jeffersonx(usa1990, 435)
a==b
jefferson(usa1790, 105)
jeffersonx(usa1790, 105)
rev(sort(jefferson(usa1832, 240))) #function doesn't automatically sort currently
rev(sort(jeffersonx(usa1832, 240))) #function doesn't automatically sort currently
library(apportR)
library(apportR)
jefferson(usa1880, 299) == jeffersonx(usa1880, 299)
jefferson(usa1880, 300) == jeffersonx(usa1880, 300)
jefferson(usa1880, 299) == jeffersonx(usa1880, 299)
jefferson(usa1880, 299) == jeffersonx(usa1880, 299)
jefferson(usa1907, 391) == jeffersonx(usa1907, 391)
library(apportR)
usa1832
jefferson(usa1832)
sort(rev(jefferson(usa1832)))
sort(jefferson(usa1832))
rev(sort(jefferson(usa1832)))
rev(sort(jefferson(usa1832, 240)))
rev(sort(jefferson(usa1832, 240)))
usa1832
rev(sort(jefferson(usa1832, 240)))
library(apportR)
usa1832/240
240/usa1832
usa1832/sum(usa1832)
(240*usa1832)/sum(usa1832)
rev(sort(jefferson(usa1832, 240)))
parador
parador
parador/sum(parador)
answers <- c(1,4,5,14,16,3)
names(answers) <- paste0("Student", LETTERS[1:6])
answers
(10*answers)/sum(answers) #standard quotas
answers <- c(1,4,5,14,16,3)
names(answers) <- paste0("Student ", LETTERS[1:6])
answers
(10*answers)/sum(answers) #standard quotas
jefferson(answers,10)
jefferson(answers, 10, k=0.1)
jefferson0(answers, 10, k=0.1)
jefferson(answers, 10, k=0.1)
popn <- c(3.31, 2.67, 1.33, 0.69)
names(popn)<- c("Apure", "Barinas", "Carabobo", "Dolores")
popn
jefferson(popn, n=160) # 160 seats
jefferson(popn, n=160, k=.1) # 160 seats
jefferson(popn, n=160, k=.01) # 160 seats
jefferson(popn, n=160, k=.001) # 160 seats
jefferson(popn, n=160, k=.0001) # 160 seats
popn1
pop1
library(apportR)
adams(usa1832, 240)
answers <- c(1,4,5,14,16,3)
names(answers) <- paste0("Student ", LETTERS[1:6])
answers
adams(answers,10)
adams(answers,6)
adams(answers,7)
set.seed(111)
z <- round(runif(7, 1, 1000))
names(z) <- LETTERS[1:7]
z
names(weekdays) <- c("Mon", "Tues", "Weds", "Thurs", "Fri", "Sat", "Sun")
set.seed(111)
weekdays <- round(runif(7, 1, 1000))
names(weekdays) <- c("Mon", "Tues", "Weds", "Thurs", "Fri", "Sat", "Sun")
weekdays
workers
set.seed(111)
workers <- round(runif(7, 1, 1000))
names(workers) <- c("Mon", "Tues", "Weds", "Thurs", "Fri", "Sat", "Sun")
workers
adams(workers)  #defaults are n=100, k=1
adams(workers, k=.1)
waffle(adams(workers, k=.1), rows=5)
library(waffle)
waffle(adams(workers, k=.1), rows=5)
waffle::waffle(adams(workers, k=.1), rows=5)
library(apportR)
